#pragma once

{%- import "common.hpp.in" as common %}

#include "gir/Base.hpp"
#include "aliases.hpp"
{% for inc in cls_.get_header_includes() -%}
#include "{{ inc }}.hpp"
{% endfor %}
{%- if cls_.get_signals() -%}
#include <functional>
#include <type_traits>
{% endif %}

namespace gir {

{% for ns,cl in cls_.get_forward_decls() -%}
namespace {{ ns }} { class {{ cl }}; }
{% endfor %}

namespace {{ cls_.namespace.name }} {

class {{ cls_.name }}
    : public virtual gir::Base
{%- for p in cls_.get_parents() %}
    , public {{ p }}
{%- endfor %}
{
public:
    {{ cls_.name }}()
    {
        _g_obj = nullptr;
    }

    {{ cls_.name }}(std::nullptr_t)
    {
        _g_obj = nullptr;
    }

    {{ cls_.name }}(::GObject *o)
    {
        {% if cls_.can_assert_type() -%}
        assert(!o || G_TYPE_CHECK_INSTANCE_TYPE(o, {{ cls_.get_type }}()));
        {%- endif %}
        _g_obj = o;
    }

    {% if cls_.namespace.name != "GObject" %}
    {{ cls_.name }}({{ cls_.c_type }} *o)
    {
        _g_obj = reinterpret_cast<::GObject *>(o);
    }
    {% endif %}

    //{{ cls_.name }}({{ cls_.name }} &&o)
    //    : gir::Base{o}
    //{
    //    _g_obj = o._g_obj;
    //    o._g_obj = nullptr;
    //}

    //{{ cls_.name }}(const {{ cls_.name }} &o)
    //    : gir::Base{o}
    //{
    //    _g_obj = o._g_obj;
    //}

    //{{ cls_.name }}& operator=({{ cls_.name }} &&o)
    //{
    //    _g_obj = o._g_obj;
    //    o._g_obj = nullptr;
    //    return *this;
    //}

    //{{ cls_.name }}& operator=(const {{ cls_.name }} &o)
    //{
    //    _g_obj = o._g_obj;
    //    return *this;
    //}

    bool operator==(const {{ cls_.name }}& o) const
    {
        return _g_obj == o._g_obj;
    }

    bool operator!=(const {{ cls_.name }}& o) const
    {
        return !(*this == o);
    }

    operator bool() const
    {
        return _g_obj != nullptr;
    }

    {% for m in cls_.get_plain_methods() %}
    {{ common.method_decl(m) }}
    {% endfor %}

    {% for m in cls_.get_signals() %}
    template <typename T, typename FuncT>
    guint on_{{ m.get_name() }}(T &derived, {{ common.signal_signature(cls_, m) }} func)
    {
        return on_{{ m.get_name() }}(derived, func);
    }

    template <typename T, typename FuncT>
    guint on_{{ m.get_name() }}(T &, FuncT func)
    {
        static_assert(std::is_base_of<{{ cls_.name }}, T>::value);

        FuncT *func_ = new FuncT(func);

        using CbT =
            {{ m.return_value.cpp_type() }}(*)(
                {{ cls_.c_type }} *inst
                {%- for pname, ptype in m.params %}
                , {{ ptype.c_type_decl() }} {{ pname -}}
                {% endfor -%}
                , gpointer data
            );
        CbT cb = [](
                {{ cls_.c_type }} *inst
                {%- for pname, ptype in m.params %}
                , {{ ptype.c_type_decl() }} {{ pname -}}
                {% endfor -%}
                , gpointer data) {
            FuncT *func = reinterpret_cast<FuncT *>(data);
            return (*func)(
                        {{ cls_.cast_from_c("inst") }}
                        {%- for pname, ptype in m.params %}
                        , {{ ptype.cast_from_c(pname) -}}
                        {% endfor -%}
                    );
        };

        auto notify = [](gpointer data, GClosure *) {
            FuncT *func = reinterpret_cast<FuncT *>(data);
            delete func;
        };

        return g_signal_connect_data(_g_obj, "{{ m.name }}", G_CALLBACK(cb), func_, notify, G_CONNECT_AFTER);
    }
    {% endfor %}
};

} //namespace {{ cls_.namespace.name }};
} //namespace gir;
